<?php

namespace Tests\Unit\Translation;

use App\Translation\Message;
use App\Translation\Order;
use App\Translation\OrderStatus;
use Illuminate\Foundation\Testing\DatabaseTransactions;
use Tests\TestCase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Foundation\Testing\RefreshDatabase;

class OrderTest extends TestCase
{

    use DatabaseTransactions;

    protected $message;

    public function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->message = factory(Message::class)->create();
    }

    /**
     * @test
     */
    public function it_can_mass_assign_these_fields()
    {
        $fields = [
            'id' => 898989,
            'unit_count' => 10,
            'unit_price' => 3,
            'message_id' => $this->message->id,
            'order_status_id' => OrderStatus::available()->id,
        ];

        $order = Order::create($fields);

        foreach ($fields as $key => $value) {
            $this->assertEquals($order->{$key}, $value);
        }

    }

    /**
     * @test
     */
    public function it_create_an_order_for_a_message    ()
    {
        $order = Order::createForMessage($this->message, 88888888);
        $this->assertEquals($this->message->id, $order->message_id);
    }

    /**
     * @test
     */
    public function it_gets_the_message_being_translated()
    {
        $order = Order::createForMessage($this->message, 88888888);
        $this->assertInstanceOf(Message::class, $order->message);
    }

    /**
     * @test
     */
    public function it_gets_the_order_status()
    {
        $status = OrderStatus::cancelled();

        $order = Order::create([
            'id' => 297329737,
            'message_id' => $this->message->id,
            'order_status_id' => $status->id
        ]);

        $this->assertEquals($order->order_status_id, $order->status->id);
    }

    /**
     * @test
     */
    public function it_updates_the_order_status()
    {
        $order = Order::createForMessage($this->message, 88888888);
        $this->assertEquals(OrderStatus::available(), $order->status);
        $order->updateStatus(OrderStatus::cancelled());
        $this->assertEquals(OrderStatus::cancelled(), $order->fresh()->status);
    }


}
